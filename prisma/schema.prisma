// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  role      String   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  formulas      Formula[]
  healthProfile HealthProfile?
  orders        Order[]

  @@map("users")
}

model HealthProfile {
  id     Int @id @default(autoincrement())
  userId Int @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Basic Info
  age           Int?
  gender        String?
  height        Float?   // cm
  weight        Float?   // kg
  activityLevel String?

  // Health Goals
  healthGoals String // JSON string of goals

  // Medical Info
  allergies   String // JSON string of allergies
  medications String // JSON string of medications
  conditions  String // JSON string of conditions

  // Preferences
  dietType       String?
  supplementForm String?
  budget         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("health_profiles")
}

model Formula {
  id          Int    @id @default(autoincrement())
  userId      Int
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  description String?

  // Ingredients as JSON
  ingredients Json // Array of ingredient objects

  // Goals
  goals String // JSON string of goals

  // Formula details
  form         String? // capsule, powder, etc.
  dosage       String?
  estimatedCost Float?
  status       String  @default("active")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("formulas")
}

model Product {
  id          Int    @id @default(autoincrement())
  name        String
  category    String
  description String
  
  // Product details
  ingredients        String // JSON string of ingredient names
  servingSize        String?
  servingsPerContainer Int?
  price              Float
  rating             Float?   @default(0)
  reviews            Int?     @default(0)
  benefits           String // JSON string of benefit strings
  allergens          String // JSON string of allergen strings
  image              String?
  inStock            Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orderItems OrderItem[]

  @@map("products")
}

model Order {
  id     Int    @id @default(autoincrement())
  userId Int
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Order details
  status     String  @default("pending") // pending, confirmed, shipped, delivered, cancelled
  totalAmount Float
  shippingAddress Json? // JSON object with address details
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  items OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        Int @id @default(autoincrement())
  orderId   Int
  order     Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  
  quantity Int
  price    Float // Price at time of order
  
  @@map("order_items")
}
